apply plugin: 'com.jfrog.artifactory'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven'

ext {
    sharedDir       = file('shared')
    originVersion   = '2.3.2.Final'
    exactproVersion = '0.1'
    artifactVersion = "${originVersion}.${exactproVersion}"
    publishVersion  =  build_mode == 'snapshot' ? "${artifactVersion}-SNAPSHOT" : artifactVersion
}

group = 'com.exactprosystems'
version = publishVersion

description = 'mvel'

sourceCompatibility = 1.6
targetCompatibility = 1.6

buildscript {
    repositories {
        maven {
            name 'MavenLocal' // for local builds only
            url 'shared'
        }
        maven { // for gradle fast plugin
            name 'Artifactory-release'
            url 'http://artifactory5.exp.exactpro.com/artifactory/libs-release'
        }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.4.12')
    }
}

repositories {
    maven {
        name 'MavenLocal' // for local builds only
        url 'shared'
    }
    maven { // for gradle fast plugin
        name 'Artifactory-release'
        url 'http://artifactory5.exp.exactpro.com/artifactory/libs-release'
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version:'4.8.2'
    testCompile group: 'com.thoughtworks.xstream', name: 'xstream', version:'1.3.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes('Implementation-Version': "${revision}")
        attributes('Build_Number': "${build_number}")
        attributes('Git_Hash': "${git_hash}")
    }
}

uploadArchives {
    repositories.mavenDeployer {
        uniqueVersion = false // publish non unique snapshots to local repository
        repository(url: "file://${sharedDir}")
        doLast {
        // Remove any invalid maven-metadata.xml files that may have been created
        // for SNAPSHOT versions that are *not* uniquely versioned.
            pom*.each { pom ->
                if (pom.version.endsWith('-SNAPSHOT')) {
                    final File artifactDir = new File(rootProject.ext.sharedDir,
                            pom.groupId.replace('.', '/')
                            + '/' + pom.artifactId
                            + '/' + pom.version)
                    delete fileTree(dir: artifactDir, include: 'maven-metadata.xml*')
                }
            }
        }
    }
    doFirst { sharedDir.mkdirs() }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task testsJar(type: Jar, dependsOn: classes) {
    classifier = 'tests'
    from sourceSets.test.output
}

artifacts {
    archives testsJar
    archives sourcesJar
}

artifactory {
    publish {
        defaults {
            // Reference to Gradle configurations defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishConfigs('archives')
        }
    }
}

artifactoryPublish {
    dependsOn testsJar, sourcesJar
}