ext {
    sharedDir           = file('shared')
    originVersion       = '2.3.2.Final'
    exactproVersion     = '1'
    publishVersion      = "${originVersion}.${exactproVersion}"

    sonatype_publish    = project.hasProperty('sonatypePublish') ? true : false
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven'
if (sonatype_publish) {
    apply plugin: 'signing'
}

group = 'com.exactpro.mvel'
version = publishVersion

description = 'mvel'

sourceCompatibility = 1.6
targetCompatibility = 1.6

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.4.12')
    }
}

repositories {
    maven {
        name 'MavenLocal' // for local builds only
        url 'shared'
    }
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version:'4.8.2'
    testCompile group: 'com.thoughtworks.xstream', name: 'xstream', version:'1.3.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes('Implementation-Version': "${revision}")
        attributes('Build_Number': "${build_number}")
        attributes('Git_Hash': "${git_hash}")
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (sonatype_publish) {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'Exactpro MVEL'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'MVEL is one of such libraries we depend on and which was modified by Exactpro.'
                    url 'https://github.com/Exactpro/mvel'

                    scm {
                        connection 'scm:git:https://github.com/Exactpro/mvel'
                        developerConnection 'scm:git:https://github.com/Exactpro/mvel'
                        url 'https://github.com/Exactpro/mvel'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'Nikita-Smirnov-Exactpro'
                            name 'Nikita Smirnov'
                            email 'nikita.smirnov@exactprosystems.com'
                        }

                        developer {
                            id 'ivandruzhinin'
                            name 'Ivan Druzhinin'
                            email 'ivan.druzhinin@exactprosystems.com'
                        }
                    }
                }
            } else {
                uniqueVersion = false // publish non unique snapshots to local repository
                repository(url: "file://${sharedDir}")
            }

            doLast {
            // Remove any invalid maven-metadata.xml files that may have been created
            // for SNAPSHOT versions that are *not* uniquely versioned.
                pom*.each { pom ->
                    if (pom.version.endsWith('-SNAPSHOT')) {
                        final File artifactDir = new File(rootProject.ext.sharedDir,
                                pom.groupId.replace('.', '/')
                                + '/' + pom.artifactId
                                + '/' + pom.version)
                        delete fileTree(dir: artifactDir, include: 'maven-metadata.xml*')
                    }
                }
            }
        }
    }
    doFirst { sharedDir.mkdirs() }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar, javadocJar
}

if (sonatype_publish) {
    signing {
        sign configurations.archives
    }
}

artifactory {
    publish {
        defaults {
            // Reference to Gradle configurations defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishConfigs('archives')
        }
    }
}

artifactoryPublish {
    dependsOn sourcesJar, javadocJar
}
